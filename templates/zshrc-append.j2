#!/usr/bin/env bash

### COLOR ### (https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux)
NC='\033[0m' # No Color
# Bold
BRED='\033[1;31m'    # Red
BPURPLE='\033[1;35m' # Purple

### PY & ANSIBLE ###
export PY_COLOR=1
export ANSIBLE_FORCE_COLOR=1

### ZSH ###
setopt NO_NOMATCH

### BASH ###
export HISTTIMEFORMAT="%F %T "
alias sudo-env='sudo -E env "PATH=$PATH"'

### EDITOR ###
export EDITOR='nvim'
export SUDO_EDITOR="nvim"

######################################################################
##
## set PATH so it includes user's private bin if it exists
##
######################################################################
if [ -d "$HOME/.local/bin" ]; then
  if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    export PATH="$HOME/.local/bin:$PATH"
  fi
fi

if [ -d {{ install_server_preferred_shell.profile_d }} ]; then
  if ls {{ install_server_preferred_shell.profile_d }}/*.sh 1>/dev/null 2>&1; then
    for i in {{ install_server_preferred_shell.profile_d }}/*.sh; do
      if [ -r "$i" ]; then
        # shellcheck disable=SC1090
        . "$i"
      fi
    done
    unset i
  fi
fi

######################################################################
##
## set PATH for dev env
##
######################################################################
export GOPATH="$HOME/.go"
if [[ ":$PATH:" != *":/usr/local/go/bin:"* ]]; then
  export PATH="$PATH:/usr/local/go/bin"
fi
if [[ ":$PATH:" != *":$GOPATH/bin:"* ]]; then
  export PATH="$PATH:$GOPATH/bin"
fi

NPM_PACKAGES="${HOME}/.npm-packages"
if [[ ":$PATH:" != *":$NPM_PACKAGES/share/man:"* ]]; then
  export MANPATH="${MANPATH-$(manpath)}:$NPM_PACKAGES/share/man"
fi
if [[ ":$PATH:" != *":/snap/node/current/bin:"* ]]; then
  export PATH="/snap/node/current/bin:$PATH"
fi
if [[ ":$PATH:" != *":$NPM_PACKAGES/bin:"* ]]; then
  export PATH="$PATH:$NPM_PACKAGES/bin"
fi

export GEM_HOME="$HOME/.gems"
if [[ ":$PATH:" != *":$GEM_HOME/bin:"* ]]; then
  export PATH="$PATH:$GEM_HOME/bin"
fi

{% set zshrc_apt_exa = install_server_config.get('apt_exa', False) -%}
{% set zshrc_apt_eza = install_server_config.get('apt_eza', False) -%}
{% if zshrc_apt_exa or zshrc_apt_eza %}
{% if zshrc_apt_exa %}
### LS as EZA ###
alias ls='eza --color=always --git'
{% endif %}
{% if zshrc_apt_eza %}
### LS as EXA ###
alias ls='exa --color=always --git'
{% endif %}
alias l='ls -a1'
alias ll='ls -aalhg'
alias lg='ll --grid'
alias llm='ll -t modified -s modified'
alias lla='ll -t accessed -s accessed'
alias llc='ll -t created -s created'
alias ld='ls -ld .*'
alias tree='ls -TlL 4'
{% endif %}

{% set zshrc_apt_bat = install_server_config.get('apt_bat', False) -%}
{% if zshrc_apt_bat %}
### CAT as BAT ###
alias catt='batcat -p -P --color always'
alias catt-b='batcat -P --color always'
{% endif %}

### CP as RSYNC ###
alias cp-r='rsync --info=progress2 --stats -auz'
alias scp-r='rsync --info=progress2 -auz -e "ssh -T -o Compression=no -x"'
alias scp-ra='rsync --info=progress2 -az -e "ssh -T -o Compression=no -x"'

### FIND ###
alias find-no='sudo /usr/bin/find / -nouser -o -nogroup -ls 2>/dev/null'
find-l() {
  # -not -regex '/home/.*' \
  sudo /usr/bin/find / \
    -not -regex '/mnt/.*' \
    -not -regex '/media/.*' \
    -not -regex '.*/\.cache/.*' \
    -not -regex '/proc/.*' \
    -not -regex '/sys/.*' \
    -not -regex '/var/log/.*' \
    -newermt "-${1:-5} minute" -ls 2>/dev/null
}
find-la() {
  sudo /usr/bin/find / \
    -newermt "-${1:-5} minute" -ls 2>/dev/null
}

### DOCKER ###
alias docker='DOCKER_BUILDKIT=1 docker'
alias docker-compose='docker compose'
alias docker-swarm-compose='docker compose --compatibility config | sed '\''s|cpus: \([0-9]\+\(\.[0-9]\+\)*\)|cpus: "\1"|'\'' | sed '\''1{/^name:/d}'\'' | sed '\''s/published: "\(.*\)"/published: \1/'\'' | docker stack deploy --resolve-image=never --with-registry-auth --compose-file -'

# shellcheck disable=SC2139
alias vm_quick_docker_ubuntu="mkdir -p ${HOME}/docker/$(date +'%Y-%m-%d') && docker run -it --rm --network host --user root -v ${HOME}/docker/$(date +'%Y-%m-%d'):/tmp/docker --name=ubuntu-server ubuntu:24.04"
alias vm_quick_docker_iperf="docker run -d -it --rm --name=iperf3-server -p 5201:5201 networkstatic/iperf3 -s"

### KUBERNETES ###
alias h='helm'
alias k='kubectl'
alias kn='k config set-context --current --namespace'
alias ka='kubectl apply -f'
alias kg='kubectl get'
alias kd='kubectl describe'
alias kdel='kubectl delete'
alias kl='kubectl logs'
alias kgpo='kubectl get pod'
alias kgd='kubectl get deployments'
alias kc='kubectx'
alias kns='kubens'
alias kl='kubectl logs -f'
alias ke='kubectl exec -it'
alias kcns='kubectl config set-context --current --namespace'

### TERRAFORM ###
alias tf='terraform'

### PYTHON TOOLS ###
alias vm_url_decode='python3 -c "import sys, urllib.parse as ul; print(ul.unquote_plus(sys.argv[1]))"'
alias vm_url_encode='python3 -c "import sys, urllib.parse as ul; print(ul.quote_plus(sys.argv[1]))"'
alias vm_reverse='python3 -c "import sys; print(sys.argv[1][::-1])"'

alias vm_hun_to_min="python3 -c 'import sys;x = sys.argv[1].split(\":\");x3 = (int(x[0]) * 60) + ((int(x[1])/100)*60);print(x3, \":: \", f\"{divmod(x3, 60)[0]}h : {divmod(x3, 60)[1]}m\")'"

# $sudo apt install xclip
# $pip3 install pyperclip
alias vm_copyFromClip='python3 -c "import sys, pyperclip; pyperclip.copy(sys.argv[1])"'

### GIT ###
alias vm_git_log1="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
alias vm_git_log2="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"

alias vm_git_pre='git ls-files | xargs pre-commit run --files'
alias vm_git_diff='git difftool --tool=nvimdiff'
alias vm_git_rei='git rm -r --cached . && git add . && git commit -m "refactor: reapply .gitignore rules"'

### TMUX ###
alias vm_tl='tmux ls'
alias vm_ta='tmux attach -t'
alias vm_tk='tmux kill-session -t'

{% if install_server_config is defined and install_server_config.get('inst_nvim_conf', False) %}
### VIM ###
alias vim=nvim
{% endif %}

### updater ###
alias vm_up_apt='sudo /usr/bin/apt update && sudo /usr/bin/apt upgrade'
alias vm_up_snap='sudo /usr/bin/snap refresh'
alias vm_up_flatpak='/usr/bin/flatpak update && /usr/bin/flatpak uninstall --unused'
alias vm_up_py_pip='python3 -m pip list --user -o | cut -f1 -d" " | tr " " "\n" | awk "{if(NR>=3)print}" | cut -d" " -f1 | xargs -n1 python3 -m pip install --user --no-cache-dir -U --break-system-packages'
alias vm_up_py_pip_root='sudo /usr/bin/python3 -m pip list -o | cut -f1 -d" " | tr " " "\n" | awk "{if(NR>=3)print}" | cut -d" " -f1 | sudo /usr/bin/xargs -n1 python3 -m pip install --no-cache-dir -U --break-system-packages'
vm_update_clean_all() {
  sudo /usr/bin/systemctl daemon-reload
  echo "Update apt..."
  sudo /usr/bin/apt update
  sudo /usr/bin/apt full-upgrade
  echo "Cleanup apt..."
  sudo /usr/bin/apt autoclean -y
  sudo /usr/bin/apt autoremove -y
  sudo /usr/bin/apt clean

  echo "#########################################################################"
  echo "#########################################################################"

  echo "Update snap..."
  sudo /usr/bin/snap refresh
  echo "Cleanup snap..."
  LANG=en_US.UTF-8 sudo /usr/bin/snap list --all | awk '/disabled/{print $1, $3}' |
    while read -r SNAPNAME REVISION; do
      sudo /usr/bin/snap remove "$SNAPNAME" --revision="$REVISION"
    done

  echo "#########################################################################"
  echo "#########################################################################"

  echo "Update flatpak..."
  sudo /usr/bin/flatpak update
  echo "Cleanup flatpak..."
  sudo /usr/bin/flatpak uninstall --unused
  sudo /usr/bin/rm -rfv /var/tmp/flatpak-cache-*

  echo "#########################################################################"
  echo "#########################################################################"

  echo "You could also run more additional updates:"
  echo "  - run ${BPURPLE}'vm_up_py_pip'${NC} for update python pip installs by user"
  echo "  - run ${BRED}'vm_up_py_pip_root'${NC} for update python pip installs by root (could possible break things)"
}

### OTHER ###
alias grep='grep --color'
alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS}'

alias pigz='pigz -k -p$(nproc)'
tar-p() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: tar-p <directory> [<password>]"
    return 1
  fi

  PATH_TO_ENC="$1"
  if [ $# -eq 1 ]; then
    tar --use-compress-program="pigz " -cpf "$(basename "$PATH_TO_ENC").tar.gz" -C "$PATH_TO_ENC" .
  elif [ $# -eq 2 ]; then
    PASSWORD_FOR_ENC="$2"
    tar --use-compress-program="pigz " -cpf - -C "$PATH_TO_ENC" . | gpg -c --cipher-algo AES256 --batch --passphrase "$PASSWORD_FOR_ENC" -o "$(basename "$PATH_TO_ENC").tar.gz.gpg.enc"
  fi
}

untar-p() {
  if [ "$#" -lt 2 ]; then
    echo "Usage: untar-p <encrypted_file> <password>"
    return 1
  fi

  mkdir -p "$(dirname "$1")/${1%%.*}"
  gpg -d --batch --passphrase "$2" "$1" | tar --use-compress-program="pigz " -xpf - -C "$(dirname "$1")/${1%%.*}"
}

alias vm_mem_free='free -h && sudo /usr/bin/sysctl -w vm.drop_caches=3 && sudo /usr/bin/sync && echo 3 | sudo /usr/bin/tee /proc/sys/vm/drop_caches && free -h'

alias t='tail -f'
alias du-l='du -hs * .* 2>/dev/null | sort -h'
alias du-g='du -hs /boot /dev /etc /home /opt /root /snap /srv /sys /tmp /usr /var 2>/dev/null | sort -h'
alias ip='ip -c'

alias chmod_ux="chmod u+x"
alias vm_ux_term="tr -d '\r' <"

alias vm_random='openssl rand -base64'
vm_random2() {
  tr -dc A-Za-z0-9 </dev/urandom | head -c "$1"
  echo ''
}
alias vm_find_command='apropos'

vm_quick_android_emulator() {
  selected_emulator=$(~/.android/Sdk/emulator/emulator -list-avds | grep -v INFO | fzf)
  if [[ -z $selected_emulator ]]; then
    exit 0
  fi
  ~/.android/Sdk/emulator/emulator -cores 4 -memory 4096 -no-boot-anim -writable-system -gpu host -avd "$selected_emulator"
}

### TOOLS ###
alias vm_my_ip='curl ifconfig.io/ip'
alias vm_my_host='curl ifconfig.io/host'
alias vm_my_country='curl ifconfig.io/country_code'
alias vm_my_ua='curl ifconfig.io/ua'
alias vm_my_all='curl ifconfig.io/all.json | jq'
vm_my_bios() {
  for d in system-manufacturer system-product-name bios-release-date bios-version; do echo "${d}: $(sudo /usr/bin/dmidecode -s $d)"; done
}

alias vm_speed='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 - --secure'
# https://github.com/R0GGER/public-iperf3-servers
alias vm_speed_1='clear && iperf3 -c speedtest.serverius.net -p 5002 -Ts1 -4 -b0 -i3 -O1 -P1 -w128M -R'
alias vm_speed_2='clear && iperf3 -c ping.online.net -p 5200 -Ts2 -4 -b0 -i3 -O1 -P1 -w128M -R'
alias vm_speed_3='clear && iperf3 -c speedtest.shinternet.ch -p 5200 -Ts3 -4 -b0 -i3 -O1 -P1 -R'
alias vm_speed_4='clear && iperf3 -c paris.testdebit.info -p 9212 -Ts4 -4 -b0 -i3 -O1 -P1 -w32M -R'

alias vm_speed_local='clear && iperf3 -Ts1 -4 -t0 -w128m -b0 -P1 -p 5201 -i3 -O1 -c'

alias vm_weather='curl https://wttr.in/${VM_WEATHER_LOCATION:-Stuttgart},${VM_WEATHER_COUNTRY:-de}'

######################################################################
##
## markdown to csv: converts a markdown table to csv
##
######################################################################
vm_markdown_to_csv() {
  if [ "$#" -lt 1 ]; then
    echo "Usage: $0 <MARKDOWN_FILE>"
    return 1
  fi

  cat "$1" | sed '2d' | sed -e 's/^| //' -e 's/ |$//' -e 's/ | /,/g' |
    awk -F, '{
      for (i=1; i<=NF; i++) {
        gsub(/^ *| *$/, "", $i);  # Remove leading and trailing spaces
        if (i > 1) printf ",";
          #$i = "\"" $i "\"";     # Sourund with double quote
          printf "%s", $i;
        }
        printf "\n";
      }' >"$(basename "$1" | cut -d. -f1).csv"
}

######################################################################
##
## ii: display useful host related information
##
######################################################################
vm_ii() {
  echo -e "\\n${BRED}You are logged on:$NC"
  hostname
  echo -e "\\n${BRED}Additional information:$NC"
  echo -e "  - description           : $(lsb_release -d | cut -d':' -f2 | awk '{$1=$1};1')"
  echo -e "  - kernel name           : $(uname -s)"
  echo -e "  - network node hostname : $(uname -n)"
  echo -e "  - kernel release        : $(uname -r)"
  echo -e "  - kernel version        : $(uname -v)"
  echo -e "  - machine hardware name : $(uname -m)"
  echo -e "  - processor type        : $(uname -p)"
  echo -e "  - hardware platform     : $(uname -i)"
  echo -e "  - operating system      : $(uname -o)"
  echo -e "  - secure boot status    : $(mokutil --sb-state)"
  echo -e "\\n${BRED}Users logged on:$NC"
  w -h
  echo -e "\\n${BRED}Current date:$NC"
  date
  echo -e "\\n${BRED}Machine stats:$NC"
  uptime | awk '{$1=$1};1'
  # echo -e "\\n${BRED}Machine BIOS:$NC"
  # vm_my_bios
  echo -e "\\n${BRED}Public facing IP Address:$NC"
  vm_my_ip
  vm_my_host
  vm_my_country
  vm_my_ua
  echo
}

######################################################################
##
## quick ubuntu: create multipass ubuntu vm
##
######################################################################
vm_quick_ubuntu() {
  TMP_CLOUD_INIT=~/vm_quick_ubuntu_cloud_init.yaml
  touch "$TMP_CLOUD_INIT"
  {
    echo '#cloud-config'
    echo 'packages_update: true'
    echo 'packages_upgrade: true'
    echo 'packages:'
    echo '  - cowsay'
    echo '  - neofetch'
    echo 'ssh_authorized_keys:'
    echo '  - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJOBsi+JPb9GLFKA83kRpaphBrvb2uM9r0U0S+SPx1Mo ansible-admin'
  } >"$TMP_CLOUD_INIT"

  VM_NAME_VERSION=$(echo "$1" | sed 's|\.||g' | tr ':' '-')
  multipass launch "$1" -n "ubuntu-$VM_NAME_VERSION" -c 2 -d 16G -m 4G --cloud-init "$TMP_CLOUD_INIT"
  rm "$TMP_CLOUD_INIT"
  multipass exec "ubuntu-$VM_NAME_VERSION" -- sh -c "${2:-neofetch}"
}
vm_quick_ubuntu_rm() {
  multipass stop "ubuntu-$(echo "$1" | sed 's|\.||g' | tr ':' '-')"
  multipass delete "ubuntu-$(echo "$1" | sed 's|\.||g' | tr ':' '-')"
  multipass purge
  multipass list
}

######################################################################
##
##
##
######################################################################
vm_shortcut_appimage() {
  if [[ "$#" != "3" ]]; then
    echo "Illegal number of parameters" >&2
    echo "$0 <NAME> <APPIMAGE> <PNG>"
  else
    name="$1"
    appimage="$2"
    image_png="$3"

    # create folder and move files
    sudo /usr/bin/mkdir -p "/opt/${name}"
    sudo /usr/bin/mv "$appimage" "/opt/${name}/${name}.AppImage"
    sudo /usr/bin/mv "$image_png" "/opt/${name}/${name}.png"

    # set correct owner
    sudo /usr/bin/chown root:root "/opt/${name}" -R

    # set correct permission
    sudo /usr/bin/chmod 755 "/opt/${name}"
    sudo /usr/bin/chmod 755 "/opt/${name}/${name}.AppImage"
    sudo /usr/bin/chmod 644 "/opt/${name}/${name}.png"

    # create Desktop Entry
    echo "[Desktop Entry]" | sudo /usr/bin/tee "/usr/share/applications/${name}.desktop"
    echo "Name=${name}" | sudo /usr/bin/tee -a "/usr/share/applications/${name}.desktop"
    echo "Exec=/opt/${name}/${name}.AppImage" | sudo /usr/bin/tee -a "/usr/share/applications/${name}.desktop"
    echo "Icon=/opt/${name}/${name}.png" | sudo /usr/bin/tee -a "/usr/share/applications/${name}.desktop"
    echo "comment=${name}" | sudo /usr/bin/tee -a "/usr/share/applications/${name}.desktop"
    echo "Type=Application" | sudo /usr/bin/tee -a "/usr/share/applications/${name}.desktop"
    echo "Terminal=false" | sudo /usr/bin/tee -a "/usr/share/applications/${name}.desktop"
    echo "Encoding=UTF-8" | sudo /usr/bin/tee -a "/usr/share/applications/${name}.desktop"
    echo "Categories=Utility;" | sudo /usr/bin/tee -a "/usr/share/applications/${name}.desktop"

    sudo /usr/bin/update-desktop-database
  fi
}

######################################################################
##
## EXPORT & ALIAS
##
######################################################################
vm_md_to_pdf() {
  cur_date=$(date +"%Y-%m-%d")
  filename=$(echo "$1" | cut -f 1 -d ".")
  pandoc "$1" \
    -o "$filename".pdf \
    --from markdown \
    --template "/opt/git/pandoc-latex-template/eisvogel.tex" \
    --pdf-engine=xelatex \
    --listings \
    -V lang=en-GB \
    -V classoption=onside \
    -V book \
    -V date="$cur_date" \
    -V 'mainfont:Source Code Pro for Powerline' \
    -V 'sansfont:DejaVuSans' \
    -V 'monofont:DejaVuSansMono' \
    -V 'mathfont:TeXGyreDejaVuMath-Regular'
}

######################################################################
##
## extract: Extract most know archives with one command
##
######################################################################
vm_extract() {
  if [ -z "$1" ]; then
    echo "Usage: vm_extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
  else
    if [ -f "$1" ]; then
      case $1 in
      *.tar.bz2) tar xjf "$1" ;;
      *.tar.gz) tar xzf "$1" ;;
      *.tar.xz) tar xJf "$1" ;;
      *.lzma) unlzma "$1" ;;
      *.bz2) bunzip2 "$1" ;;
      *.rar) unrar x -ad "$1" ;;
      *.gz) gunzip "$1" ;;
      *.tar) tar xf "$1" ;;
      *.tbz2) tar xjf "$1" ;;
      *.tgz) tar xvzf "$1" ;;
      *.zip) unzip "$1" ;;
      *.Z) uncompress "$1" ;;
      *.7z) 7z x "$1" ;;
      *.xz) unxz "$1" ;;
      *.exe) cabextract "$1" ;;
      *) echo "extract: '$1' - unknown archive method" ;;
      esac
    else
      echo "$1 - file does not exist"
    fi
  fi
}

######################################################################
##
## encrypt: encrypt to most know archives with one command
##
######################################################################
vm_encrypt() {
  if [ -n "$3" ]; then
    case "$3" in
    sec)
      case "$1" in
      rar) password="-hp" ;;
      7z) password="-p" ;;
      *) echo "'$2' cannot be encrypt via encrypt() to '$1'" ;;
      esac
      ;;
    *)
      case "$1" in
      rar) password="-hp$3" ;;
      7z) password="-p$3" ;;
      *) echo "'$2' cannot be encrypt via encrypt() to '$1'" ;;
      esac
      ;;
    esac
  fi
  if [ -e "$2" ]; then
    case "$1" in
    rar) rar a "$password" "$2.rar" "$2" ;;
    7z) 7z a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on -mhe=on "$password" "$2.7z" "$2" ;;
    *) echo "'$2' cannot be encrypt via encrypt() to '$1'" ;;
    esac
  else
    echo "'$2' is not a valid file"
  fi
}

vm_pve_spice() {
  PVE_VMID="$1"
  PVE_NODE="${PVE_NODE:-pve}"
  PVE_PROXY="${PVE_PROXY:-pve.home.local}"
  PVE_API_USER="${PVE_API_USER:-api_spice@pam!spice}"
  # PVE_TOKEN=''

  # INITIALIZATION #############################################################
  if ! type "jq" >/dev/null; then
    echo 'Command line tool "jq" is needed. Please install.'
  fi

  if [ -z "$PVE_API_USER" ]; then
    echo -n "API User: "
    read -r PVE_API_USER
    echo
  fi

  if [ -z "$PVE_TOKEN" ]; then
    echo -n "Token: "
    read -r -s PVE_TOKEN
    echo
  fi

  if [ -z "$PVE_PROXY" ]; then
    PVE_PROXY=$PVE_NODE
  fi

  # GET VM LIST ################################################################
  if [ -z "$PVE_VMID" ]; then
    {
      RESPONSE=$(curl -f -s -S -k -H "Authorization: PVEAPIToken=$PVE_API_USER=$PVE_TOKEN" "https://$PVE_PROXY:8006/api2/json/nodes/$PVE_NODE/qemu")
    } || {
      echo "ERROR: Authentication failed"
      return 1
    }

    echo "$RESPONSE" | jq -r '.data | .[] | "\(.vmid) :: \(.name)"' | sort -h
    echo -n "VM ID: "
    read -r PVE_VMID
    echo
  fi

  if [ -z "$PVE_VMID" ]; then
    echo "ERROR: VM ID not set"
    return 1
  fi

  # GET VM STATUS ##############################################################
  {
    RESPONSE=$(curl -f -s -S -k -H "Authorization: PVEAPIToken=$PVE_API_USER=$PVE_TOKEN" "https://$PVE_PROXY:8006/api2/json/nodes/$PVE_NODE/qemu/$PVE_VMID/status/current")
  } || {
    echo "ERROR: Authentication failed"
    return 1
  }

  STATUS=$(echo "$RESPONSE" | jq -r '.data.qmpstatus')
  if [ "$STATUS" = "stopped" ]; then
    echo "WARN: VM not running. Trying to start"
    RESPONSE=$(curl -d "" -f -s -S -k -H "Authorization: PVEAPIToken=$PVE_API_USER=$PVE_TOKEN" "https://$PVE_PROXY:8006/api2/json/nodes/$PVE_NODE/qemu/$PVE_VMID/status/start")

    echo "Waiting 3 seconds before trying Spice connection ..."
    sleep 3
  fi

  # GET SPICE CONFIGURATION ####################################################
  {
    RESPONSE=$(curl -f -s -S -k -H "Authorization: PVEAPIToken=$PVE_API_USER=$PVE_TOKEN" "https://$PVE_PROXY:8006/api2/json/nodes/$PVE_NODE/qemu/$PVE_VMID/spiceproxy" -d "proxy=$PVE_PROXY")
  } || {
    echo "ERROR: Maybe Proxmox-API changed?"
    echo "$RESPONSE"
    return 1
  }

  # GENERATING REMOTE-VIEWER CONNECTION FILE ###################################
  PVE_TMP=$(mktemp)
  {
    echo "[virt-viewer]"
    echo "secure-attention=$(echo "$RESPONSE" | jq -r '.data."secure-attention"')"
    echo "delete-this-file=$(echo "$RESPONSE" | jq -r '.data."delete-this-file"')"
    echo "proxy=$(echo "$RESPONSE" | jq -r '.data.proxy')"
    echo "type=$(echo "$RESPONSE" | jq -r '.data.type')"
    echo "ca=$(echo "$RESPONSE" | jq -r '.data.ca' | sed ':a;N;$!ba;s/\n/\\\\n/g')"
    echo "toggle-fullscreen=$(echo "$RESPONSE" | jq -r '.data."toggle-fullscreen"')"
    echo "title=$(echo "$RESPONSE" | jq -r '.data.title')"
    echo "host=$(echo "$RESPONSE" | jq -r '.data.host')"
    echo "password=$(echo "$RESPONSE" | jq -r '.data.password')"
    echo "host-subject=$(echo "$RESPONSE" | jq -r '.data."host-subject"')"
    echo "release-cursor=$(echo "$RESPONSE" | jq -r '.data."release-cursor"')"
    echo "tls-port=$(echo "$RESPONSE" | jq -r '.data."tls-port"')"
  } >"$PVE_TMP"

  # STARTING REMOTE-VIEWER #####################################################
  nohup remote-viewer "$PVE_TMP" >/dev/null 2>&1 &
}
