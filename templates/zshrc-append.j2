### COLOR ### (https://stackoverflow.com/questions/5947742/how-to-change-the-output-color-of-echo-in-linux)
NC='\033[0m' # No Color
# Regular Colors
BLACK='\033[0;30m'  # Black
RED='\033[0;31m'    # Red
GREEN='\033[0;32m'  # Green
YELLOW='\033[0;33m' # Yellow
BLUE='\033[0;34m'   # Blue
PURPLE='\033[0;35m' # Purple
CYAN='\033[0;36m'   # Cyan
WHITE='\033[0;37m'  # White

# Bold
BBLACK='\033[1;30m'  # Black
BRED='\033[1;31m'    # Red
BGREEN='\033[1;32m'  # Green
BYELLOW='\033[1;33m' # Yellow
BBLUE='\033[1;34m'   # Blue
BPURPLE='\033[1;35m' # Purple
BCYAN='\033[1;36m'   # Cyan
BWHITE='\033[1;37m'  # White

# Underline
UBLACK='\033[4;30m'  # Black
URED='\033[4;31m'    # Red
UGREEN='\033[4;32m'  # Green
UYELLOW='\033[4;33m' # Yellow
UBLUE='\033[4;34m'   # Blue
UPURPLE='\033[4;35m' # Purple
UCYAN='\033[4;36m'   # Cyan
UWHITE='\033[4;37m'  # White

# Background
ON_BLACK='\033[40m'  # Black
ON_RED='\033[41m'    # Red
ON_GREEN='\033[42m'  # Green
ON_YELLOW='\033[43m' # Yellow
ON_BLUE='\033[44m'   # Blue
ON_PURPLE='\033[45m' # Purple
ON_CYAN='\033[46m'   # Cyan
ON_WHITE='\033[47m'  # White

# High Intensity
IBLACK='\033[0;90m'  # Black
IRED='\033[0;91m'    # Red
IGREEN='\033[0;92m'  # Green
IYELLOW='\033[0;93m' # Yellow
IBLUE='\033[0;94m'   # Blue
IPURPLE='\033[0;95m' # Purple
ICYAN='\033[0;96m'   # Cyan
IWHITE='\033[0;97m'  # White

# Bold High Intensity
BIBLACK='\033[1;90m'  # Black
BIRED='\033[1;91m'    # Red
BIGREEN='\033[1;92m'  # Green
BIYELLOW='\033[1;93m' # Yellow
BIBLUE='\033[1;94m'   # Blue
BIPURPLE='\033[1;95m' # Purple
BICYAN='\033[1;96m'   # Cyan
BIWHITE='\033[1;97m'  # White

# High Intensity backgrounds
ON_IBLACK='\033[0;100m'  # Black
ON_IRED='\033[0;101m'    # Red
ON_IGREEN='\033[0;102m'  # Green
ON_IYELLOW='\033[0;103m' # Yellow
ON_IBLUE='\033[0;104m'   # Blue
ON_IPURPLE='\033[0;105m' # Purple
ON_ICYAN='\033[0;106m'   # Cyan
ON_IWHITE='\033[0;107m'  # White

### PY & ANSIBLE ###
export PY_COLOR=1
export ANSIBLE_FORCE_COLOR=1

### ZSH ###
setopt NO_NOMATCH

### BASH ###
export HISTTIMEFORMAT="%F %T "
alias sudo-env='sudo -E env "PATH=$PATH"'

######################################################################
##
## set PATH so it includes user's private bin if it exists
##
######################################################################
if [ -d "$HOME/.local/bin" ]; then
  PATH="$HOME/.local/bin:$PATH"
fi

if [ -d {{ install_server_preferred_shell.profile_d }} ]; then
  if ls {{ install_server_preferred_shell.profile_d }}/*.sh 1>/dev/null 2>&1; then
    for i in {{ install_server_preferred_shell.profile_d }}/*.sh; do
      if [ -r $i ]; then
        . $i
      fi
    done
    unset i
  fi
fi

### LS as EXA ###
# $sudo apt install exa
alias ls='exa --color=always'
alias l='ls -a1'
alias ll='ls -aalhg'
alias lg='ll --grid'
alias llm='ll -t modified -s modified'
alias lla='ll -t accessed -s accessed'
alias llc='ll -t created -s created'
alias ld='ls -ld .*'
alias tree='ls -TlL 3'

### CAT as BAT ###
# $sudo apt install bat
alias cat='batcat -p -P --color always'
alias cat-b='batcat -P --color always'

### CP as RSYNC ###
alias cp-r='rsync --info=progress2 --stats -auvz'
alias scp-r='rsync --info=progress2 -auvz -e "ssh -T -o Compression=no -x"'

### DOCKER ###
alias docker='DOCKER_BUILDKIT=1 docker'
alias docker-compose='DOCKER_BUILDKIT=1 docker compose'
alias docker-swarm-compose='DOCKER_BUILDKIT=1 docker compose config | sed '\''1{/^name:/d}'\'' | sed '\''s/published: "\(.*\)"/published: \1/'\'' | DOCKER_BUILDKIT=1 CONFIG_VERSION=1 docker stack deploy --resolve-image=never --with-registry-auth --compose-file -'

alias vm_quick_docker_ubuntu="mkdir -p ${HOME}/docker/$(date +'%Y-%m-%d') && docker run -it --network host -v ${HOME}/docker/$(date +'%Y-%m-%d'):/tmp/docker ubuntu:22.10"

### KUBERNETES ###
alias k='kubectl'
alias kn='k config set-context --current --namespace'
alias h='helm'

### TERRAFORM ###
alias tf='terraform'

### VMs ###
function vm_quick_ubuntu() {
  TMP_CLOUD_INIT=~/vm_quick_ubuntu_cloud_init.yaml
  touch "$TMP_CLOUD_INIT"
  echo '#cloud-config' >"$TMP_CLOUD_INIT"
  echo 'packages_update: true' >>"$TMP_CLOUD_INIT"
  echo 'packages_upgrade: true' >>"$TMP_CLOUD_INIT"
  echo 'packages:' >>"$TMP_CLOUD_INIT"
  echo '  - cowsay' >>"$TMP_CLOUD_INIT"
  echo '  - neofetch' >>"$TMP_CLOUD_INIT"
  echo 'ssh_authorized_keys:' >>"$TMP_CLOUD_INIT"
  echo '  - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIJOBsi+JPb9GLFKA83kRpaphBrvb2uM9r0U0S+SPx1Mo ansible-admin' >>"$TMP_CLOUD_INIT"
  #echo 'users:' >>"$TMP_CLOUD_INIT"
  #echo '  - name: ubuntu' >>"$TMP_CLOUD_INIT"
  #echo '    sudo: ALL=(ALL) NOPASSWD:ALL' >>"$TMP_CLOUD_INIT"
  #echo '    shell: /bin/bash' >>"$TMP_CLOUD_INIT"
  #echo '    passwd: $6$ngoYt.rUbybjQko6$QWROXbhLqcnwcJ4qACIZIao0t/HO0dfQIrnH2uJlvIf5J.j1QKHdlVb1NyRs2RoG.41MlwX4bxGzsuM0bee9A/' >>$TMP_CLOUD_INIT
  #echo 'runcmd:' >>"$TMP_CLOUD_INIT"
  #echo '  - apt update' >>"$TMP_CLOUD_INIT"
  #echo '  - apt install -y qemu-guest-agent' >>"$TMP_CLOUD_INIT"
  #echo '  - systemctl start qemu-guest-agent' >>"$TMP_CLOUD_INIT"

  VM_NAME_VERSION=$(echo "$1" | sed 's|\.||g' | tr ':' '-')
  multipass launch "$1" -n "ubuntu-$VM_NAME_VERSION" -c 2 -d 16G -m 4G --cloud-init "$TMP_CLOUD_INIT"
  rm "$TMP_CLOUD_INIT"
  multipass exec "ubuntu-$VM_NAME_VERSION" -- sh -c "${2:-neofetch}"
}
function vm_quick_ubuntu_rm() {
  multipass stop "ubuntu-$(echo "$1" | sed 's|\.||g' | tr ':' '-')"
  multipass delete "ubuntu-$(echo "$1" | sed 's|\.||g' | tr ':' '-')"
  multipass purge
  multipass list
}

### PYTHON TOOLS ###
alias vm_url_decode='python3 -c "import sys, urllib.parse as ul; print(ul.unquote_plus(sys.argv[1]))"'
alias vm_url_encode='python3 -c "import sys, urllib.parse as ul; print(ul.quote_plus(sys.argv[1]))"'
alias vm_reverse='python3 -c "import sys; print(sys.argv[1][::-1])"'

alias vm_hun_to_min="python3 -c 'import sys;x = sys.argv[1].split(\":\");x3 = (int(x[0]) * 60) + ((int(x[1])/100)*60);print(x3, \":: \", f\"{divmod(x3, 60)[0]}h : {divmod(x3, 60)[1]}m\")'"

# $sudo apt install xclip
# $pip3 install pyperclip
alias vm_copyFromClip='python3 -c "import sys, pyperclip; pyperclip.copy(sys.argv[1])"'

### GIT ###
alias vm_git_log1="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
alias vm_git_log2="git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"

### TMUX ###
alias vm_tl='tmux ls'
alias vm_ta='tmux attach -t'
alias vm_tk='tmux kill-session -t'

### updater ###
alias vm_up_py_pip='python3 -m pip list -o | cut -f1 -d" " | tr " " "\n" | awk "{if(NR>=3)print}" | cut -d" " -f1 | xargs -n1 python3 -m pip install --no-cache-dir -U --break-system-packages'
alias vm_up_py_pip_root='sudo python3 -m pip list -o | cut -f1 -d" " | tr " " "\n" | awk "{if(NR>=3)print}" | cut -d" " -f1 | sudo xargs -n1 python3 -m pip install --no-cache-dir -U --break-system-packages'
alias vm_up_flatpak='flatpak update'
alias vm_up_snap='snap refresh'

### OTHER ###
alias grep='grep --color'
alias sgrep='grep -R -n -H -C 5 --exclude-dir={.git,.svn,CVS}'

alias pigz='pigz -k -p$(( $(nproc) / 2 ))'
function tar-p() {
  tar --use-compress-program="pigz -k -p$(( $(nproc) / 2 )) " -cpf "$(basename $1).tar.gz" -C "$1" .
}

alias vm_mem_free='free -h && sudo sysctl -w vm.drop_caches=3 && sudo sync && echo 3 | sudo tee /proc/sys/vm/drop_caches && free -h'

alias t='tail -f'
alias du-l='du -hs * 2>/dev/null | sort -h'
alias du-g='du -hs /boot /dev /etc /home /opt /root /snap /srv /sys /tmp /usr /var 2>/dev/null | sort -h'
alias ip='ip -c'

alias chmod_ux="chmod u+x"
alias vm_ux_term="tr -d '\r' <"

alias vm_random='openssl rand -base64'
function vm_random2() {
  tr -dc A-Za-z0-9 </dev/urandom | head -c $1
  echo ''
}
alias vm_find_command='apropos'

### TOOLS ###
# alias vm_my_ip='curl https://my-ip-is.appspot.com/plain'
# alias vm_my_ip='curl ifconfig.co/'
alias vm_my_ip='curl ifconfig.io/ip'
alias vm_my_country='curl ifconfig.io/country_code'
alias vm_my_ua='curl ifconfig.io/ua'
alias vm_my_all='curl ifconfig.io/all.json | jq'
function vm_my_bios() {
  for d in system-manufacturer system-product-name bios-release-date bios-version; do echo "${d}: $(sudo dmidecode -s $d)"; done
}

alias vm_speed='curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 - --secure'
# https://github.com/R0GGER/public-iperf3-servers
alias vm_speed_1='clear && iperf3 -c speedtest.serverius.net -p 5002 -Ts1 -4 -b0 -i3 -O1 -P1 -w128M -R'
alias vm_speed_2='clear && iperf3 -c ping.online.net -p 5200 -Ts2 -4 -b0 -i3 -O1 -P1 -w128M -R'
alias vm_speed_3='clear && iperf3 -c speedtest.shinternet.ch -p 5200 -Ts3 -4 -b0 -i3 -O1 -P1 -R'
alias vm_speed_4='clear && iperf3 -c paris.testdebit.info -p 9212 -Ts4 -4 -b0 -i3 -O1 -P1 -w32M -R'

alias vm_weather='curl https://wttr.in/Stuttgart,de'

######################################################################
##
## ii: display useful host related information
##
######################################################################
function vm_ii() {
  echo -e "\\n${BRED}You are logged on:$NC"
  hostname
  echo -e "\\n${BRED}Additional information:$NC"
  echo -e "  - description           : $(lsb_release -d | cut -d':' -f2 | awk '{$1=$1};1')"
  echo -e "  - kernel name           : $(uname -s)"
  echo -e "  - network node hostname : $(uname -n)"
  echo -e "  - kernel release        : $(uname -r)"
  echo -e "  - kernel version        : $(uname -v)"
  echo -e "  - machine hardware name : $(uname -m)"
  echo -e "  - processor type        : $(uname -p)"
  echo -e "  - hardware platform     : $(uname -i)"
  echo -e "  - operating system      : $(uname -o)"
  echo -e "\\n${BRED}Users logged on:$NC"
  w -h
  echo -e "\\n${BRED}Current date:$NC"
  date
  echo -e "\\n${BRED}Machine stats:$NC"
  uptime | awk '{$1=$1};1'
  echo -e "\\n${BRED}Machine BIOS:$NC"
  vm_my_bios
  echo -e "\\n${BRED}Public facing IP Address:$NC"
  vm_my_ip
  vm_my_country
  vm_my_ua
  echo
}

######################################################################
##
##
##
######################################################################
function vm_shortcut_appimage() {
  if [[ "$#" != "3" ]]; then
    echo "Illegal number of parameters" >&2
    echo "$0 <NAME> <APPIMAGE> <PNG>"
  else
    name="$1"
    appimage="$2"
    image_png="$3"

    # create folder and move files
    sudo mkdir -p "/opt/${name}"
    sudo mv $appimage "/opt/${name}/${name}.AppImage"
    sudo mv $image_png "/opt/${name}/${name}.png"

    # set correct owner
    sudo chown root:root "/opt/${name}" -R

    # set correct permission
    sudo chmod 755 "/opt/${name}"
    sudo chmod 755 "/opt/${name}/${name}.AppImage"
    sudo chmod 644 "/opt/${name}/${name}.png"

    # create Desktop Entry
    echo "[Desktop Entry]" | sudo tee "/usr/share/applications/${name}.desktop"
    echo "Name=${name}" | sudo tee -a "/usr/share/applications/${name}.desktop"
    echo "Exec=/opt/${name}/${name}.AppImage" | sudo tee -a "/usr/share/applications/${name}.desktop"
    echo "Icon=/opt/${name}/${name}.png" | sudo tee -a "/usr/share/applications/${name}.desktop"
    echo "comment=${name}" | sudo tee -a "/usr/share/applications/${name}.desktop"
    echo "Type=Application" | sudo tee -a "/usr/share/applications/${name}.desktop"
    echo "Terminal=false" | sudo tee -a "/usr/share/applications/${name}.desktop"
    echo "Encoding=UTF-8" | sudo tee -a "/usr/share/applications/${name}.desktop"
    echo "Categories=Utility;" | sudo tee -a "/usr/share/applications/${name}.desktop"

    sudo update-desktop-database
  fi
}

######################################################################
##
## EXPORT & ALIAS
##
######################################################################
function vm_md_to_pdf() {
  cur_date=$(date +"%Y-%m-%d")
  filename=$(echo "$1" | cut -f 1 -d ".")
  pandoc "$1" \
    -o "$filename".pdf \
    --from markdown \
    --template "/opt/git/pandoc-latex-template/eisvogel.tex" \
    --pdf-engine=xelatex \
    --listings \
    -V lang=en-GB \
    -V classoption=onside \
    -V book \
    -V date="$cur_date" \
    -V 'mainfont:Source Code Pro for Powerline' \
    -V 'sansfont:DejaVuSans' \
    -V 'monofont:DejaVuSansMono' \
    -V 'mathfont:TeXGyreDejaVuMath-Regular'
}

######################################################################
##
## extract: Extract most know archives with one command
##
######################################################################
# usage:: vm_extract <file>
function vm_extract() {
  if [ -f "$1" ]; then
    case "$1" in
    *.tar.bz2) tar xjf "$1" ;;
    *.tar.gz) tar xzf "$1" ;;
    *.bz2) bunzip2 "$1" ;;
    *.rar) unrar x "$1" ;;
    *.gz) gunzip "$1" ;;
    *.tar) tar xf "$1" ;;
    *.tbz2) tar xjf "$1" ;;
    *.tgz) tar xzf "$1" ;;
    *.tar.xz) tar xvfJ "$1" ;;
    *.zip) unzip "$1" ;;
    *.Z) uncompress "$1" ;;
    *.7z) 7z x "$1" ;;
    *) echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

######################################################################
##
## encrypt: encrypt to most know archives with one command
##
######################################################################
function vm_encrypt() {
  if [ -n "$3" ]; then
    case "$3" in
    sec)
      case "$1" in
      rar) password="-hp" ;;
      7z) password="-p" ;;
      *) echo "'$2' cannot be encrypt via encrypt() to '$1'" ;;
      esac
      ;;
    *)
      case "$1" in
      rar) password="-hp$3" ;;
      7z) password="-p$3" ;;
      *) echo "'$2' cannot be encrypt via encrypt() to '$1'" ;;
      esac
      ;;
    esac
  fi
  if [ -e "$2" ]; then
    case "$1" in
    rar) rar a "$password" "$2.rar" "$2" ;;
    7z) 7z a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on -mhe=on "$password" "$2.7z" "$2" ;;
    *) echo "'$2' cannot be encrypt via encrypt() to '$1'" ;;
    esac
  else
    echo "'$2' is not a valid file"
  fi
}
