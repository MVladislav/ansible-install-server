#
# /etc/sysctl.conf - Configuration file for setting system variables
# See /etc/sysctl.d/ for additional system variables.
# See sysctl.conf (5) for information.
#
# To apply changes: `sudo sysctl -p --system`
#

###################################################################
# ==> Kernel Parameters

# Control kernel logging to console (severity levels).
# See: https://en.wikipedia.org/wiki/Syslog#Severity_levels
# - CUR: Current message level (default: 3, "error").
# - DEF: Default level for messages without a specified level.
# - MIN: Minimum CUR level allowed.
# - BTDEF: Boot-time default for CUR.
# |     |               | CUR | DEF | MIN | BTDEF |
# | :-- | :------------ | :-- | :-- | :-- | :---- |
# | 0   | emergency     | x   | x   | x   | x     |
# | 1   | alert         | x   | x   | x   | x     |
# | 2   | critical      | x   | x   |     | x     |
# | 3   | error         | x   | x   |     | x     |
# | 4   | warning       |     | x   |     |       |
# | 5   | notice        |     |     |     |       |
# | 6   | informational |     |     |     |       |
# | 7   | debug         |     |     |     |       |
kernel.printk=3 4 1 7

# Enable Address Space Layout Randomization (ASLR) for process memory.
# Enhances security by making it more difficult for attackers to predict memory addresses.
kernel.randomize_va_space=2
# Restrict access to dmesg for non-root users, preventing potential leakage of sensitive system information.
kernel.dmesg_restrict=1
# Controls access to kernel pointer addresses in /proc files.
# Restricting this prevents unauthorized users from reading kernel addresses.
kernel.kptr_restrict=1

# Disable core dumps for setuid programs to prevent sensitive data leaks.
fs.suid_dumpable=0

# Max inotify instances and watches per user (for applications that require more file monitoring).
fs.inotify.max_user_instances=8192
fs.inotify.max_user_watches=524288

# Restrict ptrace() debugging to parent processes only.
# Prevents exploitation of ptrace by malicious processes.
kernel.yama.ptrace_scope=1

###################################################################
# ==> Magic SysRq Key Configuration

# Enable SysRq key functions selectively.
# See https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html
# - 0: Disable completely.
# - 1: Enable all.
# - 176: Allow only reboot, remount, kill, sync, etc.
kernel.sysrq=176
#kernel.sysrq=438

###################################################################
# ==> Virtual Memory

# Prevent null-pointer dereference attacks by restricting minimum address mappable via mmap().
vm.mmap_min_addr=65536

# Memory overcommit handling:
# - 0: Default overcommit handling.
# - 1: Always overcommit.
# - 2: No overcommit beyond set ratio.
vm.overcommit_memory=0
# In case overcommit ratio needs to be manually set (in percent).
#vm.overcommit_ratio=100

# Set swappiness value. Lower values reduce swap usage and prefer keeping data in RAM.
vm.swappiness=1

# Transparent Huge Pages (THP) can be enabled for memory allocation efficiency if necessary.
#vm.nr_hugepages=128
#vm.nr_hugepages=2048
#vm.nr_hugepages_mempolicy=1

# Controls when dirty data (modified pages) is written to disk.
# See https://lonesysadmin.net/2013/12/22/better-linux-disk-caching-performance-vm-dirty_ratio/
# The `dirty_background_ratio` defines the threshold when background processes start flushing dirty pages.
# The `dirty_ratio` is the maximum percentage of RAM that can be "dirty" before the system forces a write.
# Example:
# For a system with 64GB of RAM:
# - dirty_background_ratio=5: Around 3.2GB will start flushing.
# - dirty_ratio=10: Around 6.4GB can be dirty before a forced write.
# Adjust these values depending on system load and disk performance requirements.
#vm.dirty_background_ratio=5
#vm.dirty_ratio=10

###################################################################
# ==> Networking (Functional Parameters)

# Disable IPv6 if not required.
# Recommended for systems without IPv6 dependencies for security and performance reasons.
net.ipv6.conf.all.disable_ipv6=1
net.ipv6.conf.default.disable_ipv6=1
net.ipv6.conf.lo.disable_ipv6=1

# Prevent sending ICMP redirects.
# Improves security for non-router devices to avoid man-in-the-middle attacks.
net.ipv4.conf.all.send_redirects=0
net.ipv4.conf.default.send_redirects=0

# Disable IP forwarding to prevent the system from routing packets, increasing security.
net.ipv4.ip_forward=0
net.ipv4.conf.all.forwarding=0
net.ipv6.conf.all.forwarding=0

# Disable source routing to protect against spoofing attacks, which can be used to bypass security mechanisms.
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0
net.ipv6.conf.all.accept_source_route=0
net.ipv6.conf.default.accept_source_route=0

# Prevent acceptance of ICMP redirects, mitigating spoofing attacks.
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
net.ipv6.conf.all.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0

# Do not accept ICMP redirects only for gateways listed in our default.
net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.secure_redirects=0

# Log Martian Packets (better to have enabled for security, but can cause log spam).
net.ipv4.conf.all.log_martians=0
net.ipv4.conf.default.log_martians=0

# Ignore broadcast ICMP pings and erroneous error responses to enhance security.
net.ipv4.icmp_echo_ignore_broadcasts=1
net.ipv4.icmp_ignore_bogus_error_responses=1
net.ipv4.icmp_echo_ignore_all=0

# Enable source address validation to prevent spoofing.
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.default.rp_filter=1
net.ipv4.conf.lo.rp_filter=0

# Enable TCP SYN cookies to mitigate SYN flood attacks.
net.ipv4.tcp_syncookies=1

# Enable TCP Selective Acknowledgements (SACK), improving throughput and robustness.
net.ipv4.tcp_sack=1

# Disable Path MTU Discovery to reduce the risk of attackers manipulating MTU values.
net.ipv4.ip_no_pmtu_disc=1

# Disable TCP timestamps to improve security against timing-based attacks. (RFC1323/RFC7323)
net.ipv4.tcp_timestamps=0

# Protect Against TCP Time-Wait to mitigate DoS attack attempts.
net.ipv4.tcp_rfc1337=1

# Enable temporary IPv6 addresses for better privacy (anonymizing address information).
net.ipv6.conf.all.use_tempaddr=2
net.ipv6.conf.default.use_tempaddr=2

# Enable source address verification for IPv6.
# This makes it more difficult for an attacker to spoof their IP address
net.ipv6.conf.all.accept_ra=0
net.ipv6.conf.default.accept_ra=0

# Clear routing cache to ensure routing decisions are made based on up-to-date information.
net.ipv4.route.flush=1
net.ipv6.route.flush=1

# Enable TCP Fast Open for faster connections, enhancing performance for both clients and servers.
# - 0: Disable TCP Fast Open (default if not explicitly set).
# - 1: Enable TCP Fast Open for outgoing connections (clients).
# - 2: Enable TCP Fast Open for incoming connections (servers).
# - 3: Enable TCP Fast Open for both outgoing and incoming connections.
net.ipv4.tcp_fastopen=3

# Set congestion control algorithm for better throughput and latency.
net.ipv4.tcp_congestion_control=bbr
#net.ipv4.tcp_congestion_control=htcp
#net.ipv4.tcp_congestion_control=cubic

# Default queuing discipline (reduces latency under load).
net.core.default_qdisc=fq_codel
#net.core.default_qdisc=fq

# Enable TCP window scaling for larger buffers, useful in high-bandwidth or high-latency networks.
# Increase Linux autotuning TCP buffer limit to 128MB (64MB).
net.ipv4.tcp_window_scaling=3

# Enable MTU Probing (recommended for hosts with jumbo frames enabled).
#net.ipv4.tcp_mtu_probing=1

# Enable auto-tuning of the receive buffer size for better performance in high-throughput networks.
net.ipv4.tcp_moderate_rcvbuf=1

# Don't cache the slow start threshold from previous connections for more consistent performance.
net.ipv4.tcp_no_metrics_save=1

# Enable low-latency TCP connections for time-sensitive applications.
net.ipv4.tcp_low_latency=1

# Disable netfilter on bridge devices for improved performance in virtualized environments.
net.bridge.bridge-nf-call-iptables=0
net.bridge.bridge-nf-call-arptables=0
net.bridge.bridge-nf-call-ip6tables=0

###################################################################
# ==> Networking (Performance Parameters)

# Increase maximum receive/send socket buffer sizes for handling large data streams.
# Backuped optional values: 67108864 | 134217728
net.core.rmem_max=134217728
net.core.wmem_max=134217728

# Increase input queue size for better handling of high traffic volumes.
# Backuped optional values: 1000 | 3000
net.core.netdev_max_backlog=1000

# Increase maximum number of pending connections to support high traffic loads.
# Backuped optional values: 4096 | 65535
net.core.somaxconn=4096

# Number of flow entries for Receive Packet Steering (RPS).
net.core.rps_sock_flow_entries=32768

# Optimize TCP buffers for high throughput connections (low, pressure, high).
# Backuped optional values: 67108864 | 134217728
net.ipv4.tcp_rmem=4096 87380 134217728
net.ipv4.tcp_wmem=4096 87380 134217728

# Maximum number of queued SYN requests, higher values prevent SYN flood attacks.
net.ipv4.tcp_max_syn_backlog=4096

# Define memory pressure thresholds for TCP memory management (low, pressure, high).
# Backuped optional values: 4194304 4194304 4194304
net.ipv4.tcp_mem=8388608 12582912 16777216

###################################################################
# ==> Filesystem Parameters

# Increase maximum number of open file descriptors system-wide, supporting applications with many files open.
# Backuped optional values: 2097152 | 262144 | 4194304
fs.file-max=2097152

# Increase maximum virtual memory map count for applications using large amounts of virtual memory.
vm.max_map_count=1048576

###################################################################
# Notes and Optional Settings

# ###################################################################
# Enabling TCP Timestamps and PMTU Discovery can improve certain network performance metrics
# but may expose systems to specific types of attacks:
#net.ipv4.tcp_timestamps=1
#net.ipv4.ip_no_pmtu_disc=0
#net.ipv4.tcp_fastopen=1

# ###################################################################
# If IPv6 is required, enable it with the following settings
#net.ipv6.conf.all.disable_ipv6=0
#net.ipv6.conf.default.disable_ipv6=0
#net.ipv6.conf.lo.disable_ipv6=0

# ###################################################################
# Enable packet forwarding for Docker networking (if installed and required)
#net.ipv4.ip_forward=1
#net.ipv4.conf.all.forwarding=1
#net.ipv6.conf.all.forwarding=1

###################################################################
# Optional changes for further performance tuning or alternative configurations:
###################################################################
# Increase the tcp-time-wait buckets pool size to prevent simple DOS attacks
# Backuped optional values: 262144 | 300000 | 500000 | 1440000
#net.ipv4.tcp_max_tw_buckets=1440000
#net.ipv4.tcp_tw_reuse=1
## to be tested
#net.ipv4.ipfrag_high_thresh=8388608
#net.ipv4.ipfrag_low_thresh=196608
#net.ipv6.ip6frag_high_thresh=8388608
#net.ipv6.ip6frag_low_thresh=196608
